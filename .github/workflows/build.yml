name: Build

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # Linux-specific dependencies
      - name: Install Linux system dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-gi python3-gi-cairo gir1.2-gtk-3.0 libgirepository1.0-dev

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # Install UPX
      - name: Install UPX
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get install upx
          elif [ "$RUNNER_OS" == "macOS" ]; then
            brew install upx
          elif [ "$RUNNER_OS" == "Windows" ]; then
            choco install upx
          fi
        shell: bash

      # Build with PyInstaller
      - name: Build with PyInstaller (Linux)
        if: runner.os == 'Linux'
        run: |
          export OPTIMIZE=1
          pyinstaller --clean --upx-dir="$(which upx)" main.spec
        shell: bash

      - name: Build with PyInstaller (macOS)
        if: runner.os == 'macOS'
        run: |
          export OPTIMIZE=1
          pyinstaller --clean --noconfirm --upx-dir="$(which upx)" main.spec
        shell: bash

      - name: Build with PyInstaller (Windows)
        if: runner.os == 'Windows'
        run: |
          $env:OPTIMIZE = 1
          $env:PYTHONPATH = $env:pythonLocation
          $env:PATH = "$env:pythonLocation;$env:pythonLocation\Scripts;$env:PATH"
          pyinstaller --clean --upx-dir="$(which upx)" main.spec
        shell: pwsh

      # Create platform-specific packages
      - name: Create AppImage (Linux)
        if: runner.os == 'Linux'
        run: |
          mv dist/userchrome-loader dist/userchrome-loader-linux

      - name: Create Windows package
        if: runner.os == 'Windows'
        run: |
          mv dist/userchrome-loader.exe dist/userchrome-loader-windows.exe

      - name: Create macOS package
        if: runner.os == 'macOS'
        run: |
          mv dist/userchrome-loader.app dist/userchrome-loader-macos.app

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: userchrome-loader-${{ runner.os }}
          path: |
            dist/userchrome-loader-*
          retention-days: 90

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            userchrome-loader-Linux/*
            userchrome-loader-Windows/*
            userchrome-loader-macOS/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
